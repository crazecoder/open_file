// Mocks generated by Mockito 5.4.6 from annotations
// in open_file/test/open_file_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:open_file_platform_interface/src/platform_interface/open_file_platform.dart'
    as _i3;
import 'package:open_file_platform_interface/src/types/open_result.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOpenResult_0 extends _i1.SmartFake implements _i2.OpenResult {
  _FakeOpenResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OpenFilePlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenFilePlatform extends _i1.Mock implements _i3.OpenFilePlatform {
  MockOpenFilePlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.OpenResult> open(
    String? filePath, {
    String? type,
    bool? isIOSAppOpen = false,
    String? linuxDesktopName = 'xdg',
    bool? linuxUseGio = false,
    bool? linuxByProcess = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [filePath],
          {
            #type: type,
            #isIOSAppOpen: isIOSAppOpen,
            #linuxDesktopName: linuxDesktopName,
            #linuxUseGio: linuxUseGio,
            #linuxByProcess: linuxByProcess,
          },
        ),
        returnValue: _i4.Future<_i2.OpenResult>.value(_FakeOpenResult_0(
          this,
          Invocation.method(
            #open,
            [filePath],
            {
              #type: type,
              #isIOSAppOpen: isIOSAppOpen,
              #linuxDesktopName: linuxDesktopName,
              #linuxUseGio: linuxUseGio,
              #linuxByProcess: linuxByProcess,
            },
          ),
        )),
      ) as _i4.Future<_i2.OpenResult>);
}
